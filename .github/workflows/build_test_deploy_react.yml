name: Build, Test, and Deploy React Application with JSDoc

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  repository_dispatch:
    types: [dispatch-event]

jobs:
  build_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Install dependencies, build app, and run tests
      - name: Install dependencies, build and test
        run: |
          npm ci
          npm run jsdoc
          npm run build --if-present
          npm test

      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      # Vérification et synchronisation de la version avec celle de npm
      - name: Check and synchronize package version
        id: check_version
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view bilger-app version || echo "0.0.0")

          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $NPM_VERSION"

          if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
            echo "Versions are different. Syncing local version..."
            npm version $NPM_VERSION --no-git-tag-version
            git add package.json package-lock.json
            git commit -m "Sync package version with published version"
            git push origin master
            echo "VERSION_SYNCED=true" >> $GITHUB_ENV
          else
            echo "Versions are already in sync."
            echo "VERSION_SYNCED=false" >> $GITHUB_ENV
          fi

      # Vérification si package.json a été modifié après synchronisation
      - name: Check if package.json version was modified
        id: check_version_commit
        run: |
          git fetch --unshallow
          PREV_COMMIT=$(git rev-parse HEAD^)
          OLD_VERSION=$(git show $PREV_COMMIT:package.json | jq -r '.version')
          NEW_VERSION=$(jq -r '.version' package.json)
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_ENV
            echo "Old version: $OLD_VERSION"
            echo "New version: $NEW_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_ENV
          fi

      # Incrémentation de la version si la version a été synchronisée avec npm
      - name: Increment version if synced
        if: env.VERSION_SYNCED == 'true'
        run: |
          npm version patch --no-git-tag-version
          git add package.json package-lock.json
          git commit -m "Auto-increment version for new release"
          git push origin master
          echo "VERSION_UPDATED=true" >> $GITHUB_ENV
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Build et publication sur NPM (uniquement si package.json a changé)
      - name: Build and publish package on NPM
        if: env.version_changed == 'true'
        run: |
          git config --global user.email "bilgerjeremy5705@gmail.com"
          git config --global user.name "VioletThe25th"
          npm run build-npm
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Setup GitHub Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      # Upload artifact for deployment (including JSDoc)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
          if-no-files-found: error

      # Upload coverage reports to Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Build the stack
        run: docker-compose -f docker-compose.yml up -d

      - name: Run e2e tests with Cypress
        uses: cypress-io/github-action@v6

      - name: Stop the stack
        run: docker-compose -f docker-compose.yml down

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    needs: build_test

    steps:
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
